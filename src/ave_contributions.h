// this file is autogenerated by generate.py

if (geo_derv_order > 0)
{
    if (use_dmat[0])
    {
        if (!n_is_used[1])
        {
            std::fill(&n[1*block_length*num_variables], &n[(1+1)*block_length*num_variables], 0.0);
            n_is_used[1] = true;
        }
        coor.push_back(geo_coor[0]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[1*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[0])
    {
        if (!n_is_used[2])
        {
            std::fill(&n[2*block_length*num_variables], &n[(2+1)*block_length*num_variables], 0.0);
            n_is_used[2] = true;
        }
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[2*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 0)
{
    if (use_dmat[2])
    {
        if (!n_is_used[3])
        {
            std::fill(&n[3*block_length*num_variables], &n[(3+1)*block_length*num_variables], 0.0);
            n_is_used[3] = true;
        }
        coor.push_back(geo_coor[0]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[3*block_length*num_variables],
                                true,
                                &dmat[dmat_index[2]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[1])
    {
        if (!n_is_used[3])
        {
            std::fill(&n[3*block_length*num_variables], &n[(3+1)*block_length*num_variables], 0.0);
            n_is_used[3] = true;
        }
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[3*block_length*num_variables],
                                true,
                                &dmat[dmat_index[1]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[0])
    {
        if (!n_is_used[3])
        {
            std::fill(&n[3*block_length*num_variables], &n[(3+1)*block_length*num_variables], 0.0);
            n_is_used[3] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[3*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[0])
    {
        if (!n_is_used[4])
        {
            std::fill(&n[4*block_length*num_variables], &n[(4+1)*block_length*num_variables], 0.0);
            n_is_used[4] = true;
        }
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[4*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 0)
{
    if (use_dmat[4])
    {
        if (!n_is_used[5])
        {
            std::fill(&n[5*block_length*num_variables], &n[(5+1)*block_length*num_variables], 0.0);
            n_is_used[5] = true;
        }
        coor.push_back(geo_coor[0]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[5*block_length*num_variables],
                                true,
                                &dmat[dmat_index[4]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[1])
    {
        if (!n_is_used[5])
        {
            std::fill(&n[5*block_length*num_variables], &n[(5+1)*block_length*num_variables], 0.0);
            n_is_used[5] = true;
        }
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[5*block_length*num_variables],
                                true,
                                &dmat[dmat_index[1]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[0])
    {
        if (!n_is_used[5])
        {
            std::fill(&n[5*block_length*num_variables], &n[(5+1)*block_length*num_variables], 0.0);
            n_is_used[5] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[5*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[4])
    {
        if (!n_is_used[6])
        {
            std::fill(&n[6*block_length*num_variables], &n[(6+1)*block_length*num_variables], 0.0);
            n_is_used[6] = true;
        }
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[6*block_length*num_variables],
                                true,
                                &dmat[dmat_index[4]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[2])
    {
        if (!n_is_used[6])
        {
            std::fill(&n[6*block_length*num_variables], &n[(6+1)*block_length*num_variables], 0.0);
            n_is_used[6] = true;
        }
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[6*block_length*num_variables],
                                true,
                                &dmat[dmat_index[2]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[0])
    {
        if (!n_is_used[6])
        {
            std::fill(&n[6*block_length*num_variables], &n[(6+1)*block_length*num_variables], 0.0);
            n_is_used[6] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[6*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 0)
{
    if (use_dmat[6])
    {
        if (!n_is_used[7])
        {
            std::fill(&n[7*block_length*num_variables], &n[(7+1)*block_length*num_variables], 0.0);
            n_is_used[7] = true;
        }
        coor.push_back(geo_coor[0]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[7*block_length*num_variables],
                                true,
                                &dmat[dmat_index[6]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[5])
    {
        if (!n_is_used[7])
        {
            std::fill(&n[7*block_length*num_variables], &n[(7+1)*block_length*num_variables], 0.0);
            n_is_used[7] = true;
        }
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[7*block_length*num_variables],
                                true,
                                &dmat[dmat_index[5]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[3])
    {
        if (!n_is_used[7])
        {
            std::fill(&n[7*block_length*num_variables], &n[(7+1)*block_length*num_variables], 0.0);
            n_is_used[7] = true;
        }
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[7*block_length*num_variables],
                                true,
                                &dmat[dmat_index[3]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[4])
    {
        if (!n_is_used[7])
        {
            std::fill(&n[7*block_length*num_variables], &n[(7+1)*block_length*num_variables], 0.0);
            n_is_used[7] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[7*block_length*num_variables],
                                true,
                                &dmat[dmat_index[4]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[2])
    {
        if (!n_is_used[7])
        {
            std::fill(&n[7*block_length*num_variables], &n[(7+1)*block_length*num_variables], 0.0);
            n_is_used[7] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[7*block_length*num_variables],
                                true,
                                &dmat[dmat_index[2]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[1])
    {
        if (!n_is_used[7])
        {
            std::fill(&n[7*block_length*num_variables], &n[(7+1)*block_length*num_variables], 0.0);
            n_is_used[7] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[7*block_length*num_variables],
                                true,
                                &dmat[dmat_index[1]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[0])
    {
        if (!n_is_used[7])
        {
            std::fill(&n[7*block_length*num_variables], &n[(7+1)*block_length*num_variables], 0.0);
            n_is_used[7] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[7*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[0])
    {
        if (!n_is_used[8])
        {
            std::fill(&n[8*block_length*num_variables], &n[(8+1)*block_length*num_variables], 0.0);
            n_is_used[8] = true;
        }
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[8*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 0)
{
    if (use_dmat[8])
    {
        if (!n_is_used[9])
        {
            std::fill(&n[9*block_length*num_variables], &n[(9+1)*block_length*num_variables], 0.0);
            n_is_used[9] = true;
        }
        coor.push_back(geo_coor[0]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[9*block_length*num_variables],
                                true,
                                &dmat[dmat_index[8]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[1])
    {
        if (!n_is_used[9])
        {
            std::fill(&n[9*block_length*num_variables], &n[(9+1)*block_length*num_variables], 0.0);
            n_is_used[9] = true;
        }
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[9*block_length*num_variables],
                                true,
                                &dmat[dmat_index[1]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[0])
    {
        if (!n_is_used[9])
        {
            std::fill(&n[9*block_length*num_variables], &n[(9+1)*block_length*num_variables], 0.0);
            n_is_used[9] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[9*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[8])
    {
        if (!n_is_used[10])
        {
            std::fill(&n[10*block_length*num_variables], &n[(10+1)*block_length*num_variables], 0.0);
            n_is_used[10] = true;
        }
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[10*block_length*num_variables],
                                true,
                                &dmat[dmat_index[8]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[2])
    {
        if (!n_is_used[10])
        {
            std::fill(&n[10*block_length*num_variables], &n[(10+1)*block_length*num_variables], 0.0);
            n_is_used[10] = true;
        }
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[10*block_length*num_variables],
                                true,
                                &dmat[dmat_index[2]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[0])
    {
        if (!n_is_used[10])
        {
            std::fill(&n[10*block_length*num_variables], &n[(10+1)*block_length*num_variables], 0.0);
            n_is_used[10] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[10*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 0)
{
    if (use_dmat[10])
    {
        if (!n_is_used[11])
        {
            std::fill(&n[11*block_length*num_variables], &n[(11+1)*block_length*num_variables], 0.0);
            n_is_used[11] = true;
        }
        coor.push_back(geo_coor[0]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[11*block_length*num_variables],
                                true,
                                &dmat[dmat_index[10]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[9])
    {
        if (!n_is_used[11])
        {
            std::fill(&n[11*block_length*num_variables], &n[(11+1)*block_length*num_variables], 0.0);
            n_is_used[11] = true;
        }
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[11*block_length*num_variables],
                                true,
                                &dmat[dmat_index[9]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[3])
    {
        if (!n_is_used[11])
        {
            std::fill(&n[11*block_length*num_variables], &n[(11+1)*block_length*num_variables], 0.0);
            n_is_used[11] = true;
        }
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[11*block_length*num_variables],
                                true,
                                &dmat[dmat_index[3]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[8])
    {
        if (!n_is_used[11])
        {
            std::fill(&n[11*block_length*num_variables], &n[(11+1)*block_length*num_variables], 0.0);
            n_is_used[11] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[11*block_length*num_variables],
                                true,
                                &dmat[dmat_index[8]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[2])
    {
        if (!n_is_used[11])
        {
            std::fill(&n[11*block_length*num_variables], &n[(11+1)*block_length*num_variables], 0.0);
            n_is_used[11] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[11*block_length*num_variables],
                                true,
                                &dmat[dmat_index[2]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[1])
    {
        if (!n_is_used[11])
        {
            std::fill(&n[11*block_length*num_variables], &n[(11+1)*block_length*num_variables], 0.0);
            n_is_used[11] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[11*block_length*num_variables],
                                true,
                                &dmat[dmat_index[1]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[0])
    {
        if (!n_is_used[11])
        {
            std::fill(&n[11*block_length*num_variables], &n[(11+1)*block_length*num_variables], 0.0);
            n_is_used[11] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[11*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[8])
    {
        if (!n_is_used[12])
        {
            std::fill(&n[12*block_length*num_variables], &n[(12+1)*block_length*num_variables], 0.0);
            n_is_used[12] = true;
        }
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[12*block_length*num_variables],
                                true,
                                &dmat[dmat_index[8]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[4])
    {
        if (!n_is_used[12])
        {
            std::fill(&n[12*block_length*num_variables], &n[(12+1)*block_length*num_variables], 0.0);
            n_is_used[12] = true;
        }
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[12*block_length*num_variables],
                                true,
                                &dmat[dmat_index[4]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[0])
    {
        if (!n_is_used[12])
        {
            std::fill(&n[12*block_length*num_variables], &n[(12+1)*block_length*num_variables], 0.0);
            n_is_used[12] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[12*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 0)
{
    if (use_dmat[12])
    {
        if (!n_is_used[13])
        {
            std::fill(&n[13*block_length*num_variables], &n[(13+1)*block_length*num_variables], 0.0);
            n_is_used[13] = true;
        }
        coor.push_back(geo_coor[0]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[13*block_length*num_variables],
                                true,
                                &dmat[dmat_index[12]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[9])
    {
        if (!n_is_used[13])
        {
            std::fill(&n[13*block_length*num_variables], &n[(13+1)*block_length*num_variables], 0.0);
            n_is_used[13] = true;
        }
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[13*block_length*num_variables],
                                true,
                                &dmat[dmat_index[9]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[5])
    {
        if (!n_is_used[13])
        {
            std::fill(&n[13*block_length*num_variables], &n[(13+1)*block_length*num_variables], 0.0);
            n_is_used[13] = true;
        }
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[13*block_length*num_variables],
                                true,
                                &dmat[dmat_index[5]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[8])
    {
        if (!n_is_used[13])
        {
            std::fill(&n[13*block_length*num_variables], &n[(13+1)*block_length*num_variables], 0.0);
            n_is_used[13] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[13*block_length*num_variables],
                                true,
                                &dmat[dmat_index[8]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[4])
    {
        if (!n_is_used[13])
        {
            std::fill(&n[13*block_length*num_variables], &n[(13+1)*block_length*num_variables], 0.0);
            n_is_used[13] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[13*block_length*num_variables],
                                true,
                                &dmat[dmat_index[4]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[1])
    {
        if (!n_is_used[13])
        {
            std::fill(&n[13*block_length*num_variables], &n[(13+1)*block_length*num_variables], 0.0);
            n_is_used[13] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[13*block_length*num_variables],
                                true,
                                &dmat[dmat_index[1]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[0])
    {
        if (!n_is_used[13])
        {
            std::fill(&n[13*block_length*num_variables], &n[(13+1)*block_length*num_variables], 0.0);
            n_is_used[13] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[13*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[12])
    {
        if (!n_is_used[14])
        {
            std::fill(&n[14*block_length*num_variables], &n[(14+1)*block_length*num_variables], 0.0);
            n_is_used[14] = true;
        }
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[14*block_length*num_variables],
                                true,
                                &dmat[dmat_index[12]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[10])
    {
        if (!n_is_used[14])
        {
            std::fill(&n[14*block_length*num_variables], &n[(14+1)*block_length*num_variables], 0.0);
            n_is_used[14] = true;
        }
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[14*block_length*num_variables],
                                true,
                                &dmat[dmat_index[10]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[6])
    {
        if (!n_is_used[14])
        {
            std::fill(&n[14*block_length*num_variables], &n[(14+1)*block_length*num_variables], 0.0);
            n_is_used[14] = true;
        }
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[14*block_length*num_variables],
                                true,
                                &dmat[dmat_index[6]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[8])
    {
        if (!n_is_used[14])
        {
            std::fill(&n[14*block_length*num_variables], &n[(14+1)*block_length*num_variables], 0.0);
            n_is_used[14] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[14*block_length*num_variables],
                                true,
                                &dmat[dmat_index[8]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[4])
    {
        if (!n_is_used[14])
        {
            std::fill(&n[14*block_length*num_variables], &n[(14+1)*block_length*num_variables], 0.0);
            n_is_used[14] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[14*block_length*num_variables],
                                true,
                                &dmat[dmat_index[4]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[2])
    {
        if (!n_is_used[14])
        {
            std::fill(&n[14*block_length*num_variables], &n[(14+1)*block_length*num_variables], 0.0);
            n_is_used[14] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[14*block_length*num_variables],
                                true,
                                &dmat[dmat_index[2]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[0])
    {
        if (!n_is_used[14])
        {
            std::fill(&n[14*block_length*num_variables], &n[(14+1)*block_length*num_variables], 0.0);
            n_is_used[14] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[14*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 0)
{
    if (use_dmat[14])
    {
        if (!n_is_used[15])
        {
            std::fill(&n[15*block_length*num_variables], &n[(15+1)*block_length*num_variables], 0.0);
            n_is_used[15] = true;
        }
        coor.push_back(geo_coor[0]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[15*block_length*num_variables],
                                true,
                                &dmat[dmat_index[14]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[13])
    {
        if (!n_is_used[15])
        {
            std::fill(&n[15*block_length*num_variables], &n[(15+1)*block_length*num_variables], 0.0);
            n_is_used[15] = true;
        }
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[15*block_length*num_variables],
                                true,
                                &dmat[dmat_index[13]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[11])
    {
        if (!n_is_used[15])
        {
            std::fill(&n[15*block_length*num_variables], &n[(15+1)*block_length*num_variables], 0.0);
            n_is_used[15] = true;
        }
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[15*block_length*num_variables],
                                true,
                                &dmat[dmat_index[11]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[7])
    {
        if (!n_is_used[15])
        {
            std::fill(&n[15*block_length*num_variables], &n[(15+1)*block_length*num_variables], 0.0);
            n_is_used[15] = true;
        }
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[15*block_length*num_variables],
                                true,
                                &dmat[dmat_index[7]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[12])
    {
        if (!n_is_used[15])
        {
            std::fill(&n[15*block_length*num_variables], &n[(15+1)*block_length*num_variables], 0.0);
            n_is_used[15] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[15*block_length*num_variables],
                                true,
                                &dmat[dmat_index[12]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[10])
    {
        if (!n_is_used[15])
        {
            std::fill(&n[15*block_length*num_variables], &n[(15+1)*block_length*num_variables], 0.0);
            n_is_used[15] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[15*block_length*num_variables],
                                true,
                                &dmat[dmat_index[10]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[6])
    {
        if (!n_is_used[15])
        {
            std::fill(&n[15*block_length*num_variables], &n[(15+1)*block_length*num_variables], 0.0);
            n_is_used[15] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[15*block_length*num_variables],
                                true,
                                &dmat[dmat_index[6]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[9])
    {
        if (!n_is_used[15])
        {
            std::fill(&n[15*block_length*num_variables], &n[(15+1)*block_length*num_variables], 0.0);
            n_is_used[15] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[15*block_length*num_variables],
                                true,
                                &dmat[dmat_index[9]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[5])
    {
        if (!n_is_used[15])
        {
            std::fill(&n[15*block_length*num_variables], &n[(15+1)*block_length*num_variables], 0.0);
            n_is_used[15] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[15*block_length*num_variables],
                                true,
                                &dmat[dmat_index[5]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[3])
    {
        if (!n_is_used[15])
        {
            std::fill(&n[15*block_length*num_variables], &n[(15+1)*block_length*num_variables], 0.0);
            n_is_used[15] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[15*block_length*num_variables],
                                true,
                                &dmat[dmat_index[3]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[8])
    {
        if (!n_is_used[15])
        {
            std::fill(&n[15*block_length*num_variables], &n[(15+1)*block_length*num_variables], 0.0);
            n_is_used[15] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[15*block_length*num_variables],
                                true,
                                &dmat[dmat_index[8]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[4])
    {
        if (!n_is_used[15])
        {
            std::fill(&n[15*block_length*num_variables], &n[(15+1)*block_length*num_variables], 0.0);
            n_is_used[15] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[15*block_length*num_variables],
                                true,
                                &dmat[dmat_index[4]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[2])
    {
        if (!n_is_used[15])
        {
            std::fill(&n[15*block_length*num_variables], &n[(15+1)*block_length*num_variables], 0.0);
            n_is_used[15] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[15*block_length*num_variables],
                                true,
                                &dmat[dmat_index[2]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[1])
    {
        if (!n_is_used[15])
        {
            std::fill(&n[15*block_length*num_variables], &n[(15+1)*block_length*num_variables], 0.0);
            n_is_used[15] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[15*block_length*num_variables],
                                true,
                                &dmat[dmat_index[1]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[0])
    {
        if (!n_is_used[15])
        {
            std::fill(&n[15*block_length*num_variables], &n[(15+1)*block_length*num_variables], 0.0);
            n_is_used[15] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[15*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[0])
    {
        if (!n_is_used[16])
        {
            std::fill(&n[16*block_length*num_variables], &n[(16+1)*block_length*num_variables], 0.0);
            n_is_used[16] = true;
        }
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[16*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 0)
{
    if (use_dmat[16])
    {
        if (!n_is_used[17])
        {
            std::fill(&n[17*block_length*num_variables], &n[(17+1)*block_length*num_variables], 0.0);
            n_is_used[17] = true;
        }
        coor.push_back(geo_coor[0]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[17*block_length*num_variables],
                                true,
                                &dmat[dmat_index[16]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[1])
    {
        if (!n_is_used[17])
        {
            std::fill(&n[17*block_length*num_variables], &n[(17+1)*block_length*num_variables], 0.0);
            n_is_used[17] = true;
        }
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[17*block_length*num_variables],
                                true,
                                &dmat[dmat_index[1]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[0])
    {
        if (!n_is_used[17])
        {
            std::fill(&n[17*block_length*num_variables], &n[(17+1)*block_length*num_variables], 0.0);
            n_is_used[17] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[17*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[16])
    {
        if (!n_is_used[18])
        {
            std::fill(&n[18*block_length*num_variables], &n[(18+1)*block_length*num_variables], 0.0);
            n_is_used[18] = true;
        }
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[18*block_length*num_variables],
                                true,
                                &dmat[dmat_index[16]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[2])
    {
        if (!n_is_used[18])
        {
            std::fill(&n[18*block_length*num_variables], &n[(18+1)*block_length*num_variables], 0.0);
            n_is_used[18] = true;
        }
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[18*block_length*num_variables],
                                true,
                                &dmat[dmat_index[2]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[0])
    {
        if (!n_is_used[18])
        {
            std::fill(&n[18*block_length*num_variables], &n[(18+1)*block_length*num_variables], 0.0);
            n_is_used[18] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[18*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 0)
{
    if (use_dmat[18])
    {
        if (!n_is_used[19])
        {
            std::fill(&n[19*block_length*num_variables], &n[(19+1)*block_length*num_variables], 0.0);
            n_is_used[19] = true;
        }
        coor.push_back(geo_coor[0]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[19*block_length*num_variables],
                                true,
                                &dmat[dmat_index[18]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[17])
    {
        if (!n_is_used[19])
        {
            std::fill(&n[19*block_length*num_variables], &n[(19+1)*block_length*num_variables], 0.0);
            n_is_used[19] = true;
        }
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[19*block_length*num_variables],
                                true,
                                &dmat[dmat_index[17]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[3])
    {
        if (!n_is_used[19])
        {
            std::fill(&n[19*block_length*num_variables], &n[(19+1)*block_length*num_variables], 0.0);
            n_is_used[19] = true;
        }
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[19*block_length*num_variables],
                                true,
                                &dmat[dmat_index[3]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[16])
    {
        if (!n_is_used[19])
        {
            std::fill(&n[19*block_length*num_variables], &n[(19+1)*block_length*num_variables], 0.0);
            n_is_used[19] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[19*block_length*num_variables],
                                true,
                                &dmat[dmat_index[16]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[2])
    {
        if (!n_is_used[19])
        {
            std::fill(&n[19*block_length*num_variables], &n[(19+1)*block_length*num_variables], 0.0);
            n_is_used[19] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[19*block_length*num_variables],
                                true,
                                &dmat[dmat_index[2]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[1])
    {
        if (!n_is_used[19])
        {
            std::fill(&n[19*block_length*num_variables], &n[(19+1)*block_length*num_variables], 0.0);
            n_is_used[19] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[19*block_length*num_variables],
                                true,
                                &dmat[dmat_index[1]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[0])
    {
        if (!n_is_used[19])
        {
            std::fill(&n[19*block_length*num_variables], &n[(19+1)*block_length*num_variables], 0.0);
            n_is_used[19] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[19*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[16])
    {
        if (!n_is_used[20])
        {
            std::fill(&n[20*block_length*num_variables], &n[(20+1)*block_length*num_variables], 0.0);
            n_is_used[20] = true;
        }
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[20*block_length*num_variables],
                                true,
                                &dmat[dmat_index[16]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[4])
    {
        if (!n_is_used[20])
        {
            std::fill(&n[20*block_length*num_variables], &n[(20+1)*block_length*num_variables], 0.0);
            n_is_used[20] = true;
        }
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[20*block_length*num_variables],
                                true,
                                &dmat[dmat_index[4]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[0])
    {
        if (!n_is_used[20])
        {
            std::fill(&n[20*block_length*num_variables], &n[(20+1)*block_length*num_variables], 0.0);
            n_is_used[20] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[20*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 0)
{
    if (use_dmat[20])
    {
        if (!n_is_used[21])
        {
            std::fill(&n[21*block_length*num_variables], &n[(21+1)*block_length*num_variables], 0.0);
            n_is_used[21] = true;
        }
        coor.push_back(geo_coor[0]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[21*block_length*num_variables],
                                true,
                                &dmat[dmat_index[20]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[17])
    {
        if (!n_is_used[21])
        {
            std::fill(&n[21*block_length*num_variables], &n[(21+1)*block_length*num_variables], 0.0);
            n_is_used[21] = true;
        }
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[21*block_length*num_variables],
                                true,
                                &dmat[dmat_index[17]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[5])
    {
        if (!n_is_used[21])
        {
            std::fill(&n[21*block_length*num_variables], &n[(21+1)*block_length*num_variables], 0.0);
            n_is_used[21] = true;
        }
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[21*block_length*num_variables],
                                true,
                                &dmat[dmat_index[5]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[16])
    {
        if (!n_is_used[21])
        {
            std::fill(&n[21*block_length*num_variables], &n[(21+1)*block_length*num_variables], 0.0);
            n_is_used[21] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[21*block_length*num_variables],
                                true,
                                &dmat[dmat_index[16]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[4])
    {
        if (!n_is_used[21])
        {
            std::fill(&n[21*block_length*num_variables], &n[(21+1)*block_length*num_variables], 0.0);
            n_is_used[21] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[21*block_length*num_variables],
                                true,
                                &dmat[dmat_index[4]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[1])
    {
        if (!n_is_used[21])
        {
            std::fill(&n[21*block_length*num_variables], &n[(21+1)*block_length*num_variables], 0.0);
            n_is_used[21] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[21*block_length*num_variables],
                                true,
                                &dmat[dmat_index[1]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[0])
    {
        if (!n_is_used[21])
        {
            std::fill(&n[21*block_length*num_variables], &n[(21+1)*block_length*num_variables], 0.0);
            n_is_used[21] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[21*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[20])
    {
        if (!n_is_used[22])
        {
            std::fill(&n[22*block_length*num_variables], &n[(22+1)*block_length*num_variables], 0.0);
            n_is_used[22] = true;
        }
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[22*block_length*num_variables],
                                true,
                                &dmat[dmat_index[20]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[18])
    {
        if (!n_is_used[22])
        {
            std::fill(&n[22*block_length*num_variables], &n[(22+1)*block_length*num_variables], 0.0);
            n_is_used[22] = true;
        }
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[22*block_length*num_variables],
                                true,
                                &dmat[dmat_index[18]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[6])
    {
        if (!n_is_used[22])
        {
            std::fill(&n[22*block_length*num_variables], &n[(22+1)*block_length*num_variables], 0.0);
            n_is_used[22] = true;
        }
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[22*block_length*num_variables],
                                true,
                                &dmat[dmat_index[6]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[16])
    {
        if (!n_is_used[22])
        {
            std::fill(&n[22*block_length*num_variables], &n[(22+1)*block_length*num_variables], 0.0);
            n_is_used[22] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[22*block_length*num_variables],
                                true,
                                &dmat[dmat_index[16]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[4])
    {
        if (!n_is_used[22])
        {
            std::fill(&n[22*block_length*num_variables], &n[(22+1)*block_length*num_variables], 0.0);
            n_is_used[22] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[22*block_length*num_variables],
                                true,
                                &dmat[dmat_index[4]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[2])
    {
        if (!n_is_used[22])
        {
            std::fill(&n[22*block_length*num_variables], &n[(22+1)*block_length*num_variables], 0.0);
            n_is_used[22] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[22*block_length*num_variables],
                                true,
                                &dmat[dmat_index[2]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[0])
    {
        if (!n_is_used[22])
        {
            std::fill(&n[22*block_length*num_variables], &n[(22+1)*block_length*num_variables], 0.0);
            n_is_used[22] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[22*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 0)
{
    if (use_dmat[22])
    {
        if (!n_is_used[23])
        {
            std::fill(&n[23*block_length*num_variables], &n[(23+1)*block_length*num_variables], 0.0);
            n_is_used[23] = true;
        }
        coor.push_back(geo_coor[0]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[23*block_length*num_variables],
                                true,
                                &dmat[dmat_index[22]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[21])
    {
        if (!n_is_used[23])
        {
            std::fill(&n[23*block_length*num_variables], &n[(23+1)*block_length*num_variables], 0.0);
            n_is_used[23] = true;
        }
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[23*block_length*num_variables],
                                true,
                                &dmat[dmat_index[21]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[19])
    {
        if (!n_is_used[23])
        {
            std::fill(&n[23*block_length*num_variables], &n[(23+1)*block_length*num_variables], 0.0);
            n_is_used[23] = true;
        }
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[23*block_length*num_variables],
                                true,
                                &dmat[dmat_index[19]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[7])
    {
        if (!n_is_used[23])
        {
            std::fill(&n[23*block_length*num_variables], &n[(23+1)*block_length*num_variables], 0.0);
            n_is_used[23] = true;
        }
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[23*block_length*num_variables],
                                true,
                                &dmat[dmat_index[7]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[20])
    {
        if (!n_is_used[23])
        {
            std::fill(&n[23*block_length*num_variables], &n[(23+1)*block_length*num_variables], 0.0);
            n_is_used[23] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[23*block_length*num_variables],
                                true,
                                &dmat[dmat_index[20]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[18])
    {
        if (!n_is_used[23])
        {
            std::fill(&n[23*block_length*num_variables], &n[(23+1)*block_length*num_variables], 0.0);
            n_is_used[23] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[23*block_length*num_variables],
                                true,
                                &dmat[dmat_index[18]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[6])
    {
        if (!n_is_used[23])
        {
            std::fill(&n[23*block_length*num_variables], &n[(23+1)*block_length*num_variables], 0.0);
            n_is_used[23] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[23*block_length*num_variables],
                                true,
                                &dmat[dmat_index[6]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[17])
    {
        if (!n_is_used[23])
        {
            std::fill(&n[23*block_length*num_variables], &n[(23+1)*block_length*num_variables], 0.0);
            n_is_used[23] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[23*block_length*num_variables],
                                true,
                                &dmat[dmat_index[17]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[5])
    {
        if (!n_is_used[23])
        {
            std::fill(&n[23*block_length*num_variables], &n[(23+1)*block_length*num_variables], 0.0);
            n_is_used[23] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[23*block_length*num_variables],
                                true,
                                &dmat[dmat_index[5]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[3])
    {
        if (!n_is_used[23])
        {
            std::fill(&n[23*block_length*num_variables], &n[(23+1)*block_length*num_variables], 0.0);
            n_is_used[23] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[23*block_length*num_variables],
                                true,
                                &dmat[dmat_index[3]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[16])
    {
        if (!n_is_used[23])
        {
            std::fill(&n[23*block_length*num_variables], &n[(23+1)*block_length*num_variables], 0.0);
            n_is_used[23] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[23*block_length*num_variables],
                                true,
                                &dmat[dmat_index[16]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[4])
    {
        if (!n_is_used[23])
        {
            std::fill(&n[23*block_length*num_variables], &n[(23+1)*block_length*num_variables], 0.0);
            n_is_used[23] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[23*block_length*num_variables],
                                true,
                                &dmat[dmat_index[4]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[2])
    {
        if (!n_is_used[23])
        {
            std::fill(&n[23*block_length*num_variables], &n[(23+1)*block_length*num_variables], 0.0);
            n_is_used[23] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[23*block_length*num_variables],
                                true,
                                &dmat[dmat_index[2]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[1])
    {
        if (!n_is_used[23])
        {
            std::fill(&n[23*block_length*num_variables], &n[(23+1)*block_length*num_variables], 0.0);
            n_is_used[23] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[23*block_length*num_variables],
                                true,
                                &dmat[dmat_index[1]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[0])
    {
        if (!n_is_used[23])
        {
            std::fill(&n[23*block_length*num_variables], &n[(23+1)*block_length*num_variables], 0.0);
            n_is_used[23] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[23*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[16])
    {
        if (!n_is_used[24])
        {
            std::fill(&n[24*block_length*num_variables], &n[(24+1)*block_length*num_variables], 0.0);
            n_is_used[24] = true;
        }
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[24*block_length*num_variables],
                                true,
                                &dmat[dmat_index[16]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[8])
    {
        if (!n_is_used[24])
        {
            std::fill(&n[24*block_length*num_variables], &n[(24+1)*block_length*num_variables], 0.0);
            n_is_used[24] = true;
        }
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[24*block_length*num_variables],
                                true,
                                &dmat[dmat_index[8]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[0])
    {
        if (!n_is_used[24])
        {
            std::fill(&n[24*block_length*num_variables], &n[(24+1)*block_length*num_variables], 0.0);
            n_is_used[24] = true;
        }
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[24*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 0)
{
    if (use_dmat[24])
    {
        if (!n_is_used[25])
        {
            std::fill(&n[25*block_length*num_variables], &n[(25+1)*block_length*num_variables], 0.0);
            n_is_used[25] = true;
        }
        coor.push_back(geo_coor[0]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[25*block_length*num_variables],
                                true,
                                &dmat[dmat_index[24]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[17])
    {
        if (!n_is_used[25])
        {
            std::fill(&n[25*block_length*num_variables], &n[(25+1)*block_length*num_variables], 0.0);
            n_is_used[25] = true;
        }
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[25*block_length*num_variables],
                                true,
                                &dmat[dmat_index[17]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[9])
    {
        if (!n_is_used[25])
        {
            std::fill(&n[25*block_length*num_variables], &n[(25+1)*block_length*num_variables], 0.0);
            n_is_used[25] = true;
        }
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[25*block_length*num_variables],
                                true,
                                &dmat[dmat_index[9]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[16])
    {
        if (!n_is_used[25])
        {
            std::fill(&n[25*block_length*num_variables], &n[(25+1)*block_length*num_variables], 0.0);
            n_is_used[25] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[25*block_length*num_variables],
                                true,
                                &dmat[dmat_index[16]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[8])
    {
        if (!n_is_used[25])
        {
            std::fill(&n[25*block_length*num_variables], &n[(25+1)*block_length*num_variables], 0.0);
            n_is_used[25] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[25*block_length*num_variables],
                                true,
                                &dmat[dmat_index[8]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[1])
    {
        if (!n_is_used[25])
        {
            std::fill(&n[25*block_length*num_variables], &n[(25+1)*block_length*num_variables], 0.0);
            n_is_used[25] = true;
        }
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[25*block_length*num_variables],
                                true,
                                &dmat[dmat_index[1]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[0])
    {
        if (!n_is_used[25])
        {
            std::fill(&n[25*block_length*num_variables], &n[(25+1)*block_length*num_variables], 0.0);
            n_is_used[25] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[25*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[24])
    {
        if (!n_is_used[26])
        {
            std::fill(&n[26*block_length*num_variables], &n[(26+1)*block_length*num_variables], 0.0);
            n_is_used[26] = true;
        }
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[26*block_length*num_variables],
                                true,
                                &dmat[dmat_index[24]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[18])
    {
        if (!n_is_used[26])
        {
            std::fill(&n[26*block_length*num_variables], &n[(26+1)*block_length*num_variables], 0.0);
            n_is_used[26] = true;
        }
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[26*block_length*num_variables],
                                true,
                                &dmat[dmat_index[18]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[10])
    {
        if (!n_is_used[26])
        {
            std::fill(&n[26*block_length*num_variables], &n[(26+1)*block_length*num_variables], 0.0);
            n_is_used[26] = true;
        }
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[26*block_length*num_variables],
                                true,
                                &dmat[dmat_index[10]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[16])
    {
        if (!n_is_used[26])
        {
            std::fill(&n[26*block_length*num_variables], &n[(26+1)*block_length*num_variables], 0.0);
            n_is_used[26] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[26*block_length*num_variables],
                                true,
                                &dmat[dmat_index[16]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[8])
    {
        if (!n_is_used[26])
        {
            std::fill(&n[26*block_length*num_variables], &n[(26+1)*block_length*num_variables], 0.0);
            n_is_used[26] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[26*block_length*num_variables],
                                true,
                                &dmat[dmat_index[8]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[2])
    {
        if (!n_is_used[26])
        {
            std::fill(&n[26*block_length*num_variables], &n[(26+1)*block_length*num_variables], 0.0);
            n_is_used[26] = true;
        }
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[26*block_length*num_variables],
                                true,
                                &dmat[dmat_index[2]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[0])
    {
        if (!n_is_used[26])
        {
            std::fill(&n[26*block_length*num_variables], &n[(26+1)*block_length*num_variables], 0.0);
            n_is_used[26] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[26*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 0)
{
    if (use_dmat[26])
    {
        if (!n_is_used[27])
        {
            std::fill(&n[27*block_length*num_variables], &n[(27+1)*block_length*num_variables], 0.0);
            n_is_used[27] = true;
        }
        coor.push_back(geo_coor[0]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[27*block_length*num_variables],
                                true,
                                &dmat[dmat_index[26]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[25])
    {
        if (!n_is_used[27])
        {
            std::fill(&n[27*block_length*num_variables], &n[(27+1)*block_length*num_variables], 0.0);
            n_is_used[27] = true;
        }
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[27*block_length*num_variables],
                                true,
                                &dmat[dmat_index[25]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[19])
    {
        if (!n_is_used[27])
        {
            std::fill(&n[27*block_length*num_variables], &n[(27+1)*block_length*num_variables], 0.0);
            n_is_used[27] = true;
        }
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[27*block_length*num_variables],
                                true,
                                &dmat[dmat_index[19]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[11])
    {
        if (!n_is_used[27])
        {
            std::fill(&n[27*block_length*num_variables], &n[(27+1)*block_length*num_variables], 0.0);
            n_is_used[27] = true;
        }
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[27*block_length*num_variables],
                                true,
                                &dmat[dmat_index[11]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[24])
    {
        if (!n_is_used[27])
        {
            std::fill(&n[27*block_length*num_variables], &n[(27+1)*block_length*num_variables], 0.0);
            n_is_used[27] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[27*block_length*num_variables],
                                true,
                                &dmat[dmat_index[24]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[18])
    {
        if (!n_is_used[27])
        {
            std::fill(&n[27*block_length*num_variables], &n[(27+1)*block_length*num_variables], 0.0);
            n_is_used[27] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[27*block_length*num_variables],
                                true,
                                &dmat[dmat_index[18]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[10])
    {
        if (!n_is_used[27])
        {
            std::fill(&n[27*block_length*num_variables], &n[(27+1)*block_length*num_variables], 0.0);
            n_is_used[27] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[27*block_length*num_variables],
                                true,
                                &dmat[dmat_index[10]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[17])
    {
        if (!n_is_used[27])
        {
            std::fill(&n[27*block_length*num_variables], &n[(27+1)*block_length*num_variables], 0.0);
            n_is_used[27] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[27*block_length*num_variables],
                                true,
                                &dmat[dmat_index[17]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[9])
    {
        if (!n_is_used[27])
        {
            std::fill(&n[27*block_length*num_variables], &n[(27+1)*block_length*num_variables], 0.0);
            n_is_used[27] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[27*block_length*num_variables],
                                true,
                                &dmat[dmat_index[9]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[3])
    {
        if (!n_is_used[27])
        {
            std::fill(&n[27*block_length*num_variables], &n[(27+1)*block_length*num_variables], 0.0);
            n_is_used[27] = true;
        }
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[27*block_length*num_variables],
                                true,
                                &dmat[dmat_index[3]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[16])
    {
        if (!n_is_used[27])
        {
            std::fill(&n[27*block_length*num_variables], &n[(27+1)*block_length*num_variables], 0.0);
            n_is_used[27] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[27*block_length*num_variables],
                                true,
                                &dmat[dmat_index[16]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[8])
    {
        if (!n_is_used[27])
        {
            std::fill(&n[27*block_length*num_variables], &n[(27+1)*block_length*num_variables], 0.0);
            n_is_used[27] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[27*block_length*num_variables],
                                true,
                                &dmat[dmat_index[8]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[2])
    {
        if (!n_is_used[27])
        {
            std::fill(&n[27*block_length*num_variables], &n[(27+1)*block_length*num_variables], 0.0);
            n_is_used[27] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[27*block_length*num_variables],
                                true,
                                &dmat[dmat_index[2]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[1])
    {
        if (!n_is_used[27])
        {
            std::fill(&n[27*block_length*num_variables], &n[(27+1)*block_length*num_variables], 0.0);
            n_is_used[27] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[27*block_length*num_variables],
                                true,
                                &dmat[dmat_index[1]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[0])
    {
        if (!n_is_used[27])
        {
            std::fill(&n[27*block_length*num_variables], &n[(27+1)*block_length*num_variables], 0.0);
            n_is_used[27] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[27*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[24])
    {
        if (!n_is_used[28])
        {
            std::fill(&n[28*block_length*num_variables], &n[(28+1)*block_length*num_variables], 0.0);
            n_is_used[28] = true;
        }
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[28*block_length*num_variables],
                                true,
                                &dmat[dmat_index[24]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[20])
    {
        if (!n_is_used[28])
        {
            std::fill(&n[28*block_length*num_variables], &n[(28+1)*block_length*num_variables], 0.0);
            n_is_used[28] = true;
        }
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[28*block_length*num_variables],
                                true,
                                &dmat[dmat_index[20]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[12])
    {
        if (!n_is_used[28])
        {
            std::fill(&n[28*block_length*num_variables], &n[(28+1)*block_length*num_variables], 0.0);
            n_is_used[28] = true;
        }
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[28*block_length*num_variables],
                                true,
                                &dmat[dmat_index[12]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[16])
    {
        if (!n_is_used[28])
        {
            std::fill(&n[28*block_length*num_variables], &n[(28+1)*block_length*num_variables], 0.0);
            n_is_used[28] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[28*block_length*num_variables],
                                true,
                                &dmat[dmat_index[16]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[8])
    {
        if (!n_is_used[28])
        {
            std::fill(&n[28*block_length*num_variables], &n[(28+1)*block_length*num_variables], 0.0);
            n_is_used[28] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[28*block_length*num_variables],
                                true,
                                &dmat[dmat_index[8]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[4])
    {
        if (!n_is_used[28])
        {
            std::fill(&n[28*block_length*num_variables], &n[(28+1)*block_length*num_variables], 0.0);
            n_is_used[28] = true;
        }
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[28*block_length*num_variables],
                                true,
                                &dmat[dmat_index[4]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[0])
    {
        if (!n_is_used[28])
        {
            std::fill(&n[28*block_length*num_variables], &n[(28+1)*block_length*num_variables], 0.0);
            n_is_used[28] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[28*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 0)
{
    if (use_dmat[28])
    {
        if (!n_is_used[29])
        {
            std::fill(&n[29*block_length*num_variables], &n[(29+1)*block_length*num_variables], 0.0);
            n_is_used[29] = true;
        }
        coor.push_back(geo_coor[0]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[29*block_length*num_variables],
                                true,
                                &dmat[dmat_index[28]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[25])
    {
        if (!n_is_used[29])
        {
            std::fill(&n[29*block_length*num_variables], &n[(29+1)*block_length*num_variables], 0.0);
            n_is_used[29] = true;
        }
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[29*block_length*num_variables],
                                true,
                                &dmat[dmat_index[25]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[21])
    {
        if (!n_is_used[29])
        {
            std::fill(&n[29*block_length*num_variables], &n[(29+1)*block_length*num_variables], 0.0);
            n_is_used[29] = true;
        }
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[29*block_length*num_variables],
                                true,
                                &dmat[dmat_index[21]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[13])
    {
        if (!n_is_used[29])
        {
            std::fill(&n[29*block_length*num_variables], &n[(29+1)*block_length*num_variables], 0.0);
            n_is_used[29] = true;
        }
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[29*block_length*num_variables],
                                true,
                                &dmat[dmat_index[13]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[24])
    {
        if (!n_is_used[29])
        {
            std::fill(&n[29*block_length*num_variables], &n[(29+1)*block_length*num_variables], 0.0);
            n_is_used[29] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[29*block_length*num_variables],
                                true,
                                &dmat[dmat_index[24]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[20])
    {
        if (!n_is_used[29])
        {
            std::fill(&n[29*block_length*num_variables], &n[(29+1)*block_length*num_variables], 0.0);
            n_is_used[29] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[29*block_length*num_variables],
                                true,
                                &dmat[dmat_index[20]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[12])
    {
        if (!n_is_used[29])
        {
            std::fill(&n[29*block_length*num_variables], &n[(29+1)*block_length*num_variables], 0.0);
            n_is_used[29] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[29*block_length*num_variables],
                                true,
                                &dmat[dmat_index[12]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[17])
    {
        if (!n_is_used[29])
        {
            std::fill(&n[29*block_length*num_variables], &n[(29+1)*block_length*num_variables], 0.0);
            n_is_used[29] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[29*block_length*num_variables],
                                true,
                                &dmat[dmat_index[17]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[9])
    {
        if (!n_is_used[29])
        {
            std::fill(&n[29*block_length*num_variables], &n[(29+1)*block_length*num_variables], 0.0);
            n_is_used[29] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[29*block_length*num_variables],
                                true,
                                &dmat[dmat_index[9]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[5])
    {
        if (!n_is_used[29])
        {
            std::fill(&n[29*block_length*num_variables], &n[(29+1)*block_length*num_variables], 0.0);
            n_is_used[29] = true;
        }
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[29*block_length*num_variables],
                                true,
                                &dmat[dmat_index[5]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[16])
    {
        if (!n_is_used[29])
        {
            std::fill(&n[29*block_length*num_variables], &n[(29+1)*block_length*num_variables], 0.0);
            n_is_used[29] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[29*block_length*num_variables],
                                true,
                                &dmat[dmat_index[16]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[8])
    {
        if (!n_is_used[29])
        {
            std::fill(&n[29*block_length*num_variables], &n[(29+1)*block_length*num_variables], 0.0);
            n_is_used[29] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[29*block_length*num_variables],
                                true,
                                &dmat[dmat_index[8]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[4])
    {
        if (!n_is_used[29])
        {
            std::fill(&n[29*block_length*num_variables], &n[(29+1)*block_length*num_variables], 0.0);
            n_is_used[29] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[29*block_length*num_variables],
                                true,
                                &dmat[dmat_index[4]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[1])
    {
        if (!n_is_used[29])
        {
            std::fill(&n[29*block_length*num_variables], &n[(29+1)*block_length*num_variables], 0.0);
            n_is_used[29] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[29*block_length*num_variables],
                                true,
                                &dmat[dmat_index[1]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[0])
    {
        if (!n_is_used[29])
        {
            std::fill(&n[29*block_length*num_variables], &n[(29+1)*block_length*num_variables], 0.0);
            n_is_used[29] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[29*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[28])
    {
        if (!n_is_used[30])
        {
            std::fill(&n[30*block_length*num_variables], &n[(30+1)*block_length*num_variables], 0.0);
            n_is_used[30] = true;
        }
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[30*block_length*num_variables],
                                true,
                                &dmat[dmat_index[28]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[26])
    {
        if (!n_is_used[30])
        {
            std::fill(&n[30*block_length*num_variables], &n[(30+1)*block_length*num_variables], 0.0);
            n_is_used[30] = true;
        }
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[30*block_length*num_variables],
                                true,
                                &dmat[dmat_index[26]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[22])
    {
        if (!n_is_used[30])
        {
            std::fill(&n[30*block_length*num_variables], &n[(30+1)*block_length*num_variables], 0.0);
            n_is_used[30] = true;
        }
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[30*block_length*num_variables],
                                true,
                                &dmat[dmat_index[22]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[14])
    {
        if (!n_is_used[30])
        {
            std::fill(&n[30*block_length*num_variables], &n[(30+1)*block_length*num_variables], 0.0);
            n_is_used[30] = true;
        }
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[30*block_length*num_variables],
                                true,
                                &dmat[dmat_index[14]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[24])
    {
        if (!n_is_used[30])
        {
            std::fill(&n[30*block_length*num_variables], &n[(30+1)*block_length*num_variables], 0.0);
            n_is_used[30] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[30*block_length*num_variables],
                                true,
                                &dmat[dmat_index[24]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[20])
    {
        if (!n_is_used[30])
        {
            std::fill(&n[30*block_length*num_variables], &n[(30+1)*block_length*num_variables], 0.0);
            n_is_used[30] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[30*block_length*num_variables],
                                true,
                                &dmat[dmat_index[20]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[12])
    {
        if (!n_is_used[30])
        {
            std::fill(&n[30*block_length*num_variables], &n[(30+1)*block_length*num_variables], 0.0);
            n_is_used[30] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[30*block_length*num_variables],
                                true,
                                &dmat[dmat_index[12]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[18])
    {
        if (!n_is_used[30])
        {
            std::fill(&n[30*block_length*num_variables], &n[(30+1)*block_length*num_variables], 0.0);
            n_is_used[30] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[30*block_length*num_variables],
                                true,
                                &dmat[dmat_index[18]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[10])
    {
        if (!n_is_used[30])
        {
            std::fill(&n[30*block_length*num_variables], &n[(30+1)*block_length*num_variables], 0.0);
            n_is_used[30] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[30*block_length*num_variables],
                                true,
                                &dmat[dmat_index[10]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[6])
    {
        if (!n_is_used[30])
        {
            std::fill(&n[30*block_length*num_variables], &n[(30+1)*block_length*num_variables], 0.0);
            n_is_used[30] = true;
        }
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[30*block_length*num_variables],
                                true,
                                &dmat[dmat_index[6]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[16])
    {
        if (!n_is_used[30])
        {
            std::fill(&n[30*block_length*num_variables], &n[(30+1)*block_length*num_variables], 0.0);
            n_is_used[30] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[30*block_length*num_variables],
                                true,
                                &dmat[dmat_index[16]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[8])
    {
        if (!n_is_used[30])
        {
            std::fill(&n[30*block_length*num_variables], &n[(30+1)*block_length*num_variables], 0.0);
            n_is_used[30] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[30*block_length*num_variables],
                                true,
                                &dmat[dmat_index[8]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[4])
    {
        if (!n_is_used[30])
        {
            std::fill(&n[30*block_length*num_variables], &n[(30+1)*block_length*num_variables], 0.0);
            n_is_used[30] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[30*block_length*num_variables],
                                true,
                                &dmat[dmat_index[4]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[2])
    {
        if (!n_is_used[30])
        {
            std::fill(&n[30*block_length*num_variables], &n[(30+1)*block_length*num_variables], 0.0);
            n_is_used[30] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[30*block_length*num_variables],
                                true,
                                &dmat[dmat_index[2]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[0])
    {
        if (!n_is_used[30])
        {
            std::fill(&n[30*block_length*num_variables], &n[(30+1)*block_length*num_variables], 0.0);
            n_is_used[30] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[30*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

if (geo_derv_order > 0)
{
    if (use_dmat[30])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[0]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[30]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[29])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[29]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[27])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[27]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[23])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[23]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[15])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[15]]);
        coor.clear();
    }
}

if (geo_derv_order > 1)
{
    if (use_dmat[28])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[28]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[26])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[26]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[22])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[22]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[14])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[14]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[25])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[25]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[21])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[21]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[13])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[13]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[19])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[19]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[11])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[11]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[7])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[7]]);
        coor.clear();
    }
}

if (geo_derv_order > 2)
{
    if (use_dmat[24])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[24]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[20])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[20]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[12])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[12]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[18])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[18]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[10])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[10]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[6])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[6]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[17])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[17]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[9])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[9]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[5])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[5]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[3])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[3]]);
        coor.clear();
    }
}

if (geo_derv_order > 3)
{
    if (use_dmat[16])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[16]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[8])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[8]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[4])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[4]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[2])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[2]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[1])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[1]]);
        coor.clear();
    }
}

if (geo_derv_order > 4)
{
    if (use_dmat[0])
    {
        if (!n_is_used[31])
        {
            std::fill(&n[31*block_length*num_variables], &n[(31+1)*block_length*num_variables], 0.0);
            n_is_used[31] = true;
        }
        coor.push_back(geo_coor[0]);
        coor.push_back(geo_coor[1]);
        coor.push_back(geo_coor[2]);
        coor.push_back(geo_coor[3]);
        coor.push_back(geo_coor[4]);
        batch.get_dens_geo_derv(basis,
                                mat_dim,
                                get_gradient,
                                get_tau,
                                coor,
                                &n[31*block_length*num_variables],
                                true,
                                &dmat[dmat_index[0]]);
        coor.clear();
    }
}

