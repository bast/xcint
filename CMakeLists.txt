cmake_minimum_required(VERSION 2.8 FATAL_ERROR)

project(xcint)

option(ENABLE_FORTRAN_INTERFACE "Build Fortran interface" OFF)
option(ENABLE_OPENCL            "Enable OpenCL"           OFF)
option(ENABLE_OMP               "Enable OpenMP"           OFF)
option(ENABLE_MPI               "Enable MPI"              OFF)

if(ENABLE_FORTRAN_INTERFACE)
    enable_language(C CXX Fortran)
else()
    enable_language(C CXX)
endif()

if(ENABLE_OMP)
    add_definitions(-DENABLE_OMP)
endif()

find_package(PythonInterp)
if(NOT PYTHONINTERP_FOUND)
    message(FATAL_ERROR "ERROR: Python interpreter not foubnd. Cannot continue - sorry.")
endif()

option(ENABLE_GIT_SUBMODULES "Download external projects using Git submodules at compilation time" ON)
option(ALWAYS_RESET_EXTERNAL_BUILDS "Always remove builds stamps of external projects"    ON)
option(ENABLE_TESTS "Enable tests" ON)

option(ENABLE_AUTO_BLAS   "Enable CMake to autodetect BLAS"   ON)
option(ENABLE_AUTO_LAPACK "Enable CMake to autodetect LAPACK" ON)

option(USE_EXTERNAL_NUM_GRID "Use external numerical grid" OFF)
if(USE_EXTERNAL_NUM_GRID)
    add_definitions(-DUSE_EXTERNAL_NUM_GRID)
endif()

set(CMAKE_MODULE_PATH
    ${CMAKE_MODULE_PATH}
    ${CMAKE_CURRENT_SOURCE_DIR}/cmake
    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/math
    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/compilers
    )

if(ENABLE_MPI)
    find_package(MPI)
    if(MPI_FOUND)
        include_directories(${MPI_INCLUDE_PATH})
        add_definitions(-DENABLE_MPI)
    else()
        message(FATAL_ERROR "-- You asked for MPI, but CMake could not find any MPI installation, check $PATH")
    endif()
endif()

include(ConfigSafeGuards)
include(ConfigCompilerFlags)

set(CMAKE_Fortran_MODULE_DIRECTORY
    ${PROJECT_BINARY_DIR}/modules
    )
include(ConfigParentSettings)

set(EXTERNAL_LIBS)

if(ENABLE_OPENCL)
    add_definitions(-DENABLE_OPENCL)
endif()

set(DEVELOPMENT_CODE TRUE)

include(ConfigExternal)

if(MPI_FOUND)
    set(PARENT_DEFINITIONS "${PARENT_DEFINITIONS} -DENABLE_MPI")
endif()

set(ExternalProjectCMakeArgs
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_INSTALL_PREFIX=${PROJECT_BINARY_DIR}/external
    -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
    -DENABLE_FORTRAN_INTERFACE=OFF
    )
add_external(xcfun)

if(ENABLE_OPENCL)
    set(ExternalProjectCMakeArgs
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_INSTALL_PREFIX=${PROJECT_BINARY_DIR}/external
        -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
        -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
        )
    ExternalProject_Add(clBLAS
        DOWNLOAD_COMMAND ${UPDATE_COMMAND}
        DOWNLOAD_DIR ${PROJECT_SOURCE_DIR}
        SOURCE_DIR ${PROJECT_SOURCE_DIR}/external/clBLAS/src
        BINARY_DIR ${PROJECT_BINARY_DIR}/external/clBLAS-build
        STAMP_DIR ${PROJECT_BINARY_DIR}/external/clBLAS-stamp
        TMP_DIR ${PROJECT_BINARY_DIR}/external/clBLAS-tmp
        INSTALL_DIR ${PROJECT_BINARY_DIR}/external
        CMAKE_ARGS ${ExternalProjectCMakeArgs}
        )
    set(EXTERNAL_LIBS
        ${PROJECT_BINARY_DIR}/external/lib64/libclBLAS.so
        ${EXTERNAL_LIBS}
        )
endif()


# math detection
set(BLAS_LANG "C")
set(LAPACK_LANG "Fortran")
set(MKL_COMPILER_BINDINGS ${CMAKE_CXX_COMPILER_ID})
include(ConfigMath)

# in case accelerate is available but MKL is not, we take accelerate
find_package(Accelerate)
if(ACCELERATE_FOUND AND NOT HAVE_MKL_BLAS AND NOT HAVE_MKL_LAPACK AND ${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
    add_definitions(-DHAVE_ACCELERATE_FRAMEWORK)
    include_directories(${ACCELERATE_INCLUDE_DIRS})
    set(EXTERNAL_LIBS
        ${ACCELERATE_LIBRARIES}
        ${EXTERNAL_LIBS}
        )
endif()

include_directories(
    ${PROJECT_SOURCE_DIR}/src/density
    ${PROJECT_BINARY_DIR}/external/include
    ${PROJECT_SOURCE_DIR}/external/lebedev
    ${PROJECT_SOURCE_DIR}/external/googletest
    ${PROJECT_SOURCE_DIR}/external/googletest/include
    )

include(OptimizeForArchitecture)
OptimizeForArchitecture()
if(AVX_FOUND)
    add_definitions(-DCPU_MEM_ALIGN=32)
    message(STATUS "Setting CPU_MEM_ALIGN=32")
elseif(SSE3_FOUND)
    add_definitions(-DCPU_MEM_ALIGN=16)
    message(STATUS "Setting CPU_MEM_ALIGN=16")
else()
    message(FATAL_ERROR "neither SSE3 nor AVX detected; adapt CMakeLists.txt")
endif()

include_directories(src interfaces)

add_custom_command(
    OUTPUT
        ${PROJECT_SOURCE_DIR}/src/density/autogenerated.h
        ${PROJECT_SOURCE_DIR}/src/density/autogenerated_0.cpp
        ${PROJECT_SOURCE_DIR}/src/density/autogenerated_1.cpp
        ${PROJECT_SOURCE_DIR}/src/density/autogenerated_2.cpp
        ${PROJECT_SOURCE_DIR}/src/density/autogenerated_3.cpp
        ${PROJECT_SOURCE_DIR}/src/density/autogenerated_4.cpp
        ${PROJECT_SOURCE_DIR}/src/density/autogenerated_5.cpp
        ${PROJECT_SOURCE_DIR}/src/density/parameters.h
        ${PROJECT_SOURCE_DIR}/src/density/offsets.h
    COMMAND
        ${PYTHON_EXECUTABLE} ${PROJECT_SOURCE_DIR}/src/density/generate.py
    WORKING_DIRECTORY
        ${PROJECT_SOURCE_DIR}/src/density
    DEPENDS
        src/density/generate.py
        src/density/cs_trans.py
    )

add_library(
    xcint
    src/io.cpp
    src/rolex.cpp
    src/Functional.cpp
    src/Grid.cpp
    src/XCint.cpp
    src/becke_partitioning.cpp
    src/grid_radial.cpp
    src/MemAllocator.cpp
    external/lebedev/sphere_lebedev_rule.cpp
    interfaces/xcint_c_interface.cpp
    src/density/autogenerated_0.cpp
    src/density/autogenerated_1.cpp
    src/density/autogenerated_2.cpp
    src/density/autogenerated_3.cpp
    src/density/autogenerated_4.cpp
    src/density/autogenerated_5.cpp
    src/density/ao_vector.cpp
    src/density/rTypeBasis.cpp
    src/density/rTypeAOBatch.cpp
    )

include(ConfigTesting)

add_library(
    gtest
    ${PROJECT_SOURCE_DIR}/external/googletest/src/gtest-all.cc
    ${PROJECT_SOURCE_DIR}/external/googletest/src/gtest_main.cc
    )
add_dependencies(gtest git_update)

set_source_files_properties(${PROJECT_SOURCE_DIR}/external/googletest/src/gtest-all.cc  PROPERTIES GENERATED 1)
set_source_files_properties(${PROJECT_SOURCE_DIR}/external/googletest/src/gtest_main.cc PROPERTIES GENERATED 1)

add_executable(
    unit_tests
    test/main.cpp
    test/energy_lda.cpp
    test/energy_b3lyp.cpp
    )
add_dependencies(unit_tests gtest)

target_link_libraries(
    unit_tests
    gtest
    xcint
    ${PROJECT_BINARY_DIR}/external/xcfun-build/libxcfun.a
    ${EXTERNAL_LIBS}
    )

add_custom_command(
    OUTPUT
        ${PROJECT_SOURCE_DIR}/interfaces/xcint_c_parameters.h
        ${PROJECT_SOURCE_DIR}/interfaces/xcint_fortran_parameters.h
    COMMAND
        ${PYTHON_EXECUTABLE} ${PROJECT_SOURCE_DIR}/interfaces/generate.py ${PROJECT_SOURCE_DIR}/interfaces/xcint_c_parameters.h ${PROJECT_SOURCE_DIR}/interfaces/xcint_fortran_parameters.h
    WORKING_DIRECTORY
        ${PROJECT_SOURCE_DIR}
    DEPENDS
        ${PROJECT_SOURCE_DIR}/interfaces/generate.py
    )

add_custom_target(
    generate_interface_parameters
    ALL
    DEPENDS
        ${PROJECT_SOURCE_DIR}/interfaces/xcint_c_parameters.h
        ${PROJECT_SOURCE_DIR}/interfaces/xcint_fortran_parameters.h
    )

add_dependencies(xcint xcfun)

if(ENABLE_FORTRAN_INTERFACE)
    add_library(
        xcint_fortran_interface
        interfaces/xcint_fortran_interface.F90
        )
    add_dependencies(xcint_fortran_interface generate_interface_parameters)
endif()

if(ENABLE_OPENCL)
    add_executable(
        dgemm_example.x
        src/dgemm_example.cpp
        )
    target_link_libraries(
        dgemm_example.x
        ${EXTERNAL_LIBS}
        )
endif()

install(TARGETS xcint ARCHIVE DESTINATION lib)
