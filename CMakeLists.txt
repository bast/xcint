cmake_minimum_required(VERSION 2.8 FATAL_ERROR)

project(xcint)

option(ENABLE_FORTRAN_INTERFACE "Build Fortran interface" OFF)
option(ENABLE_CODE_COVERAGE     "Enable code coverage"    OFF)

if(ENABLE_FORTRAN_INTERFACE)
    enable_language(C CXX Fortran)
else()
    enable_language(C CXX)
endif()

find_package(PythonInterp)
if(NOT PYTHONINTERP_FOUND)
    message(FATAL_ERROR "ERROR: Python interpreter not found. Cannot continue - sorry.")
endif()

option(ALWAYS_RESET_EXTERNAL_BUILDS "Always remove builds stamps of external projects"    ON)
option(ENABLE_TESTS "Enable tests" ON)

option(ENABLE_AUTO_BLAS   "Enable CMake to autodetect BLAS"   ON)
option(ENABLE_AUTO_LAPACK "Enable CMake to autodetect LAPACK" ON)

option(USE_EXTERNAL_NUM_GRID "Use external numerical grid" OFF)
if(USE_EXTERNAL_NUM_GRID)
    add_definitions(-DUSE_EXTERNAL_NUM_GRID)
endif()

set(CMAKE_MODULE_PATH
    ${CMAKE_MODULE_PATH}
    ${CMAKE_CURRENT_SOURCE_DIR}/cmake
    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/math
    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/compilers
    )

option(ENABLE_MPI "Enable MPI" OFF)
if(ENABLE_MPI)
    find_package(MPI)
    if(MPI_FOUND)
        include_directories(${MPI_INCLUDE_PATH})
        add_definitions(-DENABLE_MPI)
    else()
        message(FATAL_ERROR "-- You asked for MPI, but CMake could not find any MPI installation, check $PATH")
    endif()
endif()

include(ConfigSafeGuards)
include(CheckCXX11Features)
include(ConfigCompilerFlags)

option(ENABLE_OMP "Enable OpenMP" OFF)
if(ENABLE_OMP)
    find_package(OpenMP)
    if(OPENMP_FOUND)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
        add_definitions(-DENABLE_OMP)
    endif()
endif()

set(CMAKE_Fortran_MODULE_DIRECTORY
    ${PROJECT_BINARY_DIR}/modules
    )
include(ConfigParentSettings)

set(EXTERNAL_LIBS)

include(ConfigExternal)

# XCFun code
if(MPI_FOUND)
    set(PARENT_DEFINITIONS "${PARENT_DEFINITIONS} -DENABLE_MPI")
endif()
set(ExternalProjectCMakeArgs
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_INSTALL_PREFIX=${PROJECT_BINARY_DIR}/external
    -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
    -DENABLE_FORTRAN_INTERFACE=OFF
    )
add_external(xcfun)

# numgrid code
set(ExternalProjectCMakeArgs
    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
    -DCMAKE_INSTALL_PREFIX=${PROJECT_BINARY_DIR}/external
    -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}
    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
    -DENABLE_MPI=${ENABLE_MPI}
    )
add_external(numgrid)
include_directories(${PROJECT_SOURCE_DIR}/external/numgrid/api)


# math detection
set(BLAS_LANG "Fortran")
set(LAPACK_LANG "Fortran")
set(MKL_COMPILER_BINDINGS ${CMAKE_CXX_COMPILER_ID})
include(ConfigMath)


include_directories(
    ${PROJECT_SOURCE_DIR}/src
    ${PROJECT_SOURCE_DIR}/src/density
    ${PROJECT_BINARY_DIR}/external/include
    ${PROJECT_SOURCE_DIR}/external/lebedev
    ${PROJECT_SOURCE_DIR}/external/googletest
    ${PROJECT_SOURCE_DIR}/external/googletest/include
    ${PROJECT_SOURCE_DIR}/api
    ${PROJECT_BINARY_DIR}/generated
    )

file(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/generated)

include(OptimizeForArchitecture)
OptimizeForArchitecture()
if(AVX_FOUND)
    add_definitions(-DCPU_MEM_ALIGN=32)
    message(STATUS "Setting CPU_MEM_ALIGN=32")
elseif(SSE3_FOUND)
    add_definitions(-DCPU_MEM_ALIGN=16)
    message(STATUS "Setting CPU_MEM_ALIGN=16")
else()
    message(FATAL_ERROR "neither SSE3 nor AVX detected; adapt CMakeLists.txt")
endif()


# generate AO evaluation code
add_custom_command(
    OUTPUT
        ${PROJECT_BINARY_DIR}/generated/autogenerated.h
        ${PROJECT_BINARY_DIR}/generated/autogenerated_0.cpp
        ${PROJECT_BINARY_DIR}/generated/autogenerated_1.cpp
        ${PROJECT_BINARY_DIR}/generated/autogenerated_2.cpp
        ${PROJECT_BINARY_DIR}/generated/autogenerated_3.cpp
        ${PROJECT_BINARY_DIR}/generated/autogenerated_4.cpp
        ${PROJECT_BINARY_DIR}/generated/autogenerated_5.cpp
        ${PROJECT_BINARY_DIR}/generated/parameters.h
        ${PROJECT_BINARY_DIR}/generated/offsets.h
    COMMAND
        ${PYTHON_EXECUTABLE} ${PROJECT_SOURCE_DIR}/src/density/generate.py ${PROJECT_BINARY_DIR}/generated
    WORKING_DIRECTORY
        ${PROJECT_SOURCE_DIR}/src/density
    DEPENDS
        src/density/generate.py
        src/density/cs_trans.py
    )


add_library(
    xcint
    src/io.cpp
    src/rolex.cpp
    src/Functional.cpp
    src/XCint.cpp
    src/MemAllocator.cpp
    api/xcint_c_api.cpp
    src/density/ao_vector.cpp
    src/density/Basis.cpp
    src/density/AOBatch.cpp
    ${PROJECT_BINARY_DIR}/generated/autogenerated_0.cpp
    ${PROJECT_BINARY_DIR}/generated/autogenerated_1.cpp
    ${PROJECT_BINARY_DIR}/generated/autogenerated_2.cpp
    ${PROJECT_BINARY_DIR}/generated/autogenerated_3.cpp
    ${PROJECT_BINARY_DIR}/generated/autogenerated_4.cpp
    ${PROJECT_BINARY_DIR}/generated/autogenerated_5.cpp
    )

set(BUILDNAME
    "${CMAKE_SYSTEM_NAME}-${CMAKE_HOST_SYSTEM_PROCESSOR}-${CMAKE_Fortran_COMPILER_ID}-${BLAS_TYPE}-${CMAKE_BUILD_TYPE}"
    CACHE STRING
    "Name of build on the dashboard"
    )

set(DART_TESTING_TIMEOUT
    "1200"
    CACHE STRING
    "Set timeout in seconds for every single test"
    )

include(CTest)
enable_testing()

foreach(_test energy_lda energy_b3lyp)
    add_executable(${_test} test/${_test}.cpp)

    target_link_libraries(
        ${_test}
        xcint
        ${PROJECT_BINARY_DIR}/external/xcfun-build/libxcfun.a
        ${PROJECT_BINARY_DIR}/external/numgrid-build/libnumgrid.a
        ${EXTERNAL_LIBS}
        )

    if(MPI_FOUND)
        add_test(${_test} mpirun -np 4 ${PROJECT_BINARY_DIR}/${_test})
    else()
        add_test(${_test} ${PROJECT_BINARY_DIR}/${_test})
    endif()
endforeach()

# generate interface headers
add_custom_command(
    OUTPUT
        ${PROJECT_BINARY_DIR}/generated/xcint_c_parameters.h
        ${PROJECT_BINARY_DIR}/generated/xcint_fortran_parameters.h
    COMMAND
        ${PYTHON_EXECUTABLE} ${PROJECT_SOURCE_DIR}/api/generate.py ${PROJECT_BINARY_DIR}/generated/xcint_c_parameters.h ${PROJECT_BINARY_DIR}/generated/xcint_fortran_parameters.h
    WORKING_DIRECTORY
        ${PROJECT_SOURCE_DIR}
    DEPENDS
        ${PROJECT_SOURCE_DIR}/api/generate.py
    )
add_custom_target(
    generate_interface_parameters
    ALL
    DEPENDS
        ${PROJECT_BINARY_DIR}/generated/xcint_c_parameters.h
        ${PROJECT_BINARY_DIR}/generated/xcint_fortran_parameters.h
    )


add_dependencies(xcint xcfun)
add_dependencies(xcint numgrid)

if(ENABLE_FORTRAN_INTERFACE)
    add_library(
        xcint_fortran_api
        api/xcint_fortran_api.F90
        )
    add_dependencies(xcint_fortran_api generate_interface_parameters)
endif()

install(TARGETS xcint ARCHIVE DESTINATION lib)
